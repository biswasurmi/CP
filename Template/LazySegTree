https://vjudge.net/contest/678705#problem/F

///131111129..........
#include<bits/stdc++.h>
#include <sstream>
using namespace std;
#define ll          long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>
///Chess moves.........
// int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right// int dy[] = {+1, -1, +0, +0};
// int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1};
// int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
///Constants........
const ll mod = 998244353;
const ll Max = 3e5 + 5;
const ll inf = 1e18+5;
ll fact[Max];
ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a, ll b){ return (a/gcd(a, b)*b);}
ll bigmod(ll a,ll b, ll mod){
    if(b==0)return 1;
    ll x=bigmod(a,b/2, mod);
    x=(x*x)%mod;
    if(b&1)x=(x*(a%mod))%mod;
    return x;
}
ll inverse(ll a, ll M){if(gcd(a, M)==1) return bigmod(a, M-2, M) % M;return 1;}
ll ncr(ll a, ll b, ll mod){ ll x = max(a-b, b), ans=1; for(ll K=a, L=1; K>=x+1; K--, L++){ ans = ans * K % mod; ans = ans * inverse(L, mod) % mod;} return ans;}
ll ncrwithk(ll n,ll k){if(k>n-k) k=n-k;ll p=1,pp=1;if(k!=0){while(k){p*=n;pp*=k;ll m=__gcd(p,pp);p/=m;pp/=m;n--;k--;}}else p=1;return p;}
ll mul(ll a,ll b){ll ans=0ll;while(b){if(b&1) ans+=a;b>>=1;a+=a;if(a>inf) a=inf;if(ans>inf) ans=inf;}return ans;}
void fac(){ fact[0]=fact[1]=1; for(ll i=2;i<Max;i++){ fact[i]=(fact[i-1]*i)%mod; } }
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct Node{
    ll one, zero, neg;
};
class segTree{
    vector<Node>tree;
    vector<ll>lazy;
    ll n;
public:
    segTree(vector<ll>&arr){
        n = arr.size();
        tree.resize(4 * n);
        lazy.resize(4 * n, 0);

    }
    void build(ll node, ll st, ll en, vector<ll>&arr){
        if(st == en){
            if(arr[st] == 1) tree[node].one = 1;
            else if(arr[st] == 0) tree[node].zero = 1;
            else tree[node].neg = 1;
            return;
        }
        ll mid = (st + en) / 2;
        build(2 * node + 1, st, mid, arr);
        build(2 * node + 2, mid + 1, en, arr);
        tree[node].one = tree[2 * node + 1].one + tree[2 * node + 2].one;
        tree[node].zero = tree[2 * node + 1].zero + tree[2 * node + 2].zero;
        tree[node].neg = tree[2 * node + 1].neg + tree[2 * node + 2].neg;
    }
    void propagate(ll node, ll st, ll en){
        if(lazy[node]){
            swap(tree[node].one, tree[node].zero);
            if(st != en){
                lazy[2 * node + 1] ^= 1;
                lazy[2 * node + 2] ^= 1;
            }
            lazy[node] = 0;
        }
    }
    void update(ll node, ll st, ll en, ll l, ll r)
    {
        propagate(node, st, en);
        if(st > r || en < l) return;
        if(st >= l && en <= r){
            swap(tree[node].one, tree[node].zero);
            if(st != en){
                lazy[2 * node + 1] ^= 1;
                lazy[2 * node + 2] ^= 1;
            }
            return;
        }
        ll mid = (st + en ) / 2;
        update(2 * node + 1, st, mid, l, r);
        update(2 * node + 2, mid + 1, en, l, r);
        tree[node].one = tree[2 * node + 1].one + tree[2 * node + 2].one;
        tree[node].zero = tree[2 * node + 1].zero + tree[2 * node + 2].zero;
        tree[node].neg = tree[2 * node + 1].neg + tree[2 * node + 2].neg;
    }
    ll query(ll node, ll st, ll en, ll l, ll r){
        propagate(node, st, en);
        if(st > r or en < l) return 0;
        if(st >= l and en <= r) return tree[node].one;
        ll mid = (st + en) / 2;
        return query(2 * node + 1, st, mid, l, r) + query(2 * node + 2, mid + 1, en, l, r);
    }
};
int main() {
    urmi();
    int test = 1, tc = 1;
    //cin >> test;
    for (int i1 = 1; i1 <= test; i1++) {
        ll n, m;
        cin >> n >> m;
        ll s[n], p[n];
        vector<ll>arr;
        ll ans = 0;
        for(ll i = 0; i < n; i++){
            cin >> s[i] >> p[i];
            arr.pb(s[i]);
            ans += p[i];
        }
        segTree st(arr);
        st.build(0, 0, n - 1, arr);
        while(m--){
            char ch;
            ll a, b, c;
            cin >> ch;
            if(ch == 'W'){
                cin >> a >> b;
                st.update(0, 0, arr.size() - 1, a, b);
            }
            else{
                cin >> a;
                ans += st.query(0, 0, arr.size() - 1, 0, arr.size() - 1) * a;
            }
        }
        cout << ans << nl;
    }
    return 0;
}
