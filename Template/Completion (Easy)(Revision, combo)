https://www.codechef.com/problems/FILLIN0?tab=ide
///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define orderedmultiset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 998244353;
const ll Max = 5e5 + 5;
const ll inf = 1e18+5;
ll fact[Max];
ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a, ll b){ return (a/gcd(a, b)*b);}
ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

int main() {
    //urmi();
    fac();
    int test = 1;
    cin >> test;
    for (int i1 = 1; i1 <= test; i1++) {
        ll n, big = 0, small = 0, ans = 1, np = 0;
        cin >> n;
        ll a[2 * n];
        set<ll>s, s1;
        ll b[n + 1];
        for(ll i = 0; i < 2 * n; i++){
            cin >> a[i];
            if(a[i] == 0) continue;
            if(a[i] > n) big++;
            if(a[i] <= n) small++;
        }
        big = n - big;
        small = n - small;
        for(ll i = 0; i < 2 * n; i+= 2){
            if(a[i] == 0 and a[i + 1] == 0) np++;
        }
        //cout << big << " " << small << " " << np << nl;
        big = fact[big];
        small = fact[small];
        big = ((big % mod) * (small % mod)) % mod;
        if(big < 0) big = (big + mod) % mod;
        ans = ((ans % mod) * (big % mod)) % mod;
        ans = ((ans % mod) * bigmod(2LL, np, mod) % mod ) % mod;
        if(ans < 0) ans = (ans + mod) % mod;
        cout << ans << nl;
    }
}

