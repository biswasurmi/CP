class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def dfs(root, c, vis, v):
    vis[c] = True
    for i in v[c]:
        if not vis[i[0]]:
            if i[1] == 0:
                root.right = TreeNode(i[0])
                dfs(root.right, i[0], vis, v)
            else:
                root.left = TreeNode(i[0])
                dfs(root.left, i[0], vis, v)

class Solution:
    def createBinaryTree(self, descriptions):
        v = [[] for _ in range(100005)]
        cnt = [0] * 100005
        for i in descriptions:
            c, d, e = i
            v[c].append((d, e))
            cnt[d] += 1
        
        # Find the root
        c = 0
        for i in descriptions:
            if cnt[i[0]] == 0:
                c = i[0]
                break
        
        root = TreeNode(c)
        vis = [False] * 100005
        dfs(root, c, vis, v)
        return root
