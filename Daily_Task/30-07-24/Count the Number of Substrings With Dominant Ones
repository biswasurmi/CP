class Solution {
public:
    int numberOfSubstrings(string s) {
        vector<int> prefixSum(s.size() + 1, 0);
        vector<int> v;

        // Build the prefix sum for '1's and record the positions of '0's
        for (int i = 0; i < s.size(); i++) {
            prefixSum[i + 1] = prefixSum[i] + (s[i] == '1');
            if (s[i] == '0') {
                v.push_back(i);
            }
        }

        int ans = 0;

        for (int i = 0; i <= 200; i++) {
            for (int j = 0; j < v.size(); j++) {
                int k = j + i;
                if (k >= v.size()) break;

                int leftZeroPos = j > 0 ? v[j - 1] : -1;
                int rightZeroPos = k + 1 < v.size() ? v[k + 1] : s.size();

                int cnt = prefixSum[v[k] + 1] - prefixSum[v[j]];
                int cnt1 = prefixSum[v[j]] - prefixSum[leftZeroPos + 1];
                int cnt2 = prefixSum[rightZeroPos] - prefixSum[v[k] + 1];

                int c = (i + 1) * (i + 1);

                if (cnt + cnt1 + cnt2 < c) continue;

                if (cnt >= c) {
                    ans += cnt1 == 0 ? 1 : cnt1 * (cnt2 + 1) + 1;
                } else if (cnt + cnt2 >= c) {
                    if (cnt1 == 0) {
                        ans += 0; // No need to add anything
                    } else {
                        int l = cnt1 * (cnt2 + 1);
                        int l1 = max((c - cnt) - 1, 0);
                        l1 = cnt2 - l1 + 1;
                        l1 = (cnt2 + 1) - l1;
                        int n1 = min(cnt1, l1);
                        int l2 = (2 * l1 + (n1 - 1) * (-1)) * n1 / 2;
                        l -= l2;
                        ans += l;
                    }
                } else {
                    int l = c - (cnt + cnt2);
                    l = cnt1 - l + 1;
                    int l1 = l * (cnt2 + 1);
                    int l2 = (cnt2 + 1) - 1;
                    int n1 = min(l2, l);
                    l2 = (2 * l2 + (n1 - 1) * (-1)) * n1 / 2;
                    l1 -= l2;
                    ans += l1;
                }

                if (cnt2 && cnt2 + cnt >= c) {
                    int l1 = max(c - cnt, 0);
                    l1 = cnt2 - l1 + 1;
                    l1 = min(l1, cnt2);
                    ans += l1;
                }
            }
        }

        // Add the count for contiguous '1's
        for (int i = 0; i < s.size();) {
            if (s[i] == '0') {
                i++;
                continue;
            }
            int cnt = 0;
            while (i < s.size() && s[i] == '1') {
                i++;
                cnt++;
            }
            ans += (cnt * (cnt + 1)) / 2;
        }

        return ans;
    }
};
