///https://leetcode.com/problems/maximum-strong-pair-xor-ii/



#define ll long long

class Solution {
public:
    struct Node {
        Node* link[2] = { nullptr, nullptr };
        ll cnt0 = 0, cnt1 = 0;

        bool containkey(ll bit) {
            return (link[bit] != nullptr);
        }

        void put(ll bit, Node* node) {
            link[bit] = node;
        }

        Node* get(ll bit) {
            return link[bit];
        }
    };

    class Trie {
    private:
        Node* root;

    public:
        Trie() {
            root = new Node();
        }

        void Insert(ll num) {
            Node* node = root;
            for (ll i = 31; i >= 0; i--) {
                ll bit = (num >> i) & 1ll;
                if (bit) node->cnt1++;
                else node->cnt0++;

                if (!node->containkey(bit)) {
                    node->put(bit, new Node());
                }
                node = node->get(bit);
            }
        }

        ll Max(ll num) {
            Node* node = root;
            ll ans = 0;

            for (ll i = 31; i >= 0; i--) {
                ll bit = (num >> i) & 1ll;
                ll c = node->cnt0, d = node->cnt1;

                if (c == 0 && d == 0) break;

                if (c && d) {
                    ans += (1 << i);
                    node = node->get(!bit);
                } else if (c) {
                    if (bit) {
                        ans += (1 << i);
                        node = node->get(!bit);
                    } else {
                        node = node->get(bit);
                    }
                } else {
                    if (!bit) {
                        ans += (1 << i);
                        node = node->get(!bit);
                    } else {
                        node = node->get(bit);
                    }
                }

                if (!node) {
                    break;
                }
            }
            return ans;
        }

        void Erase(ll num) {
            Node* node = root;
            for (ll i = 31; i >= 0; i--) {
                ll bit = (num >> i) & 1ll;
                if (bit) {
                    node->cnt1--;
                    node = node->get(bit);
                } else {
                    node->cnt0--;
                    node = node->get(bit);
                }
            }
        }
    };

    int maximumStrongPairXor(vector<int>& nums) {
        Trie tri;
        sort(nums.begin(), nums.end());
        int ans = 0;
        int n = nums.size();
        if (n == 0) return ans;

        for (int i = n - 1, j = n - 1; j >= 0; ) {
            if (i == j) {
                tri.Insert(nums[i]);
                j--;
            } else {
                if (j < 0 || nums[j] * 2 < nums[i]) {
                    tri.Erase(nums[i]);
                    i--;
                } else {
                    if (j >= 0) {
                        tri.Insert(nums[j]);
                        int ma = tri.Max(nums[j]);
                        ans = max(ans, ma);
                    }
                    j--;
                }
            }
        }
        return ans;
    }
};
