///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define orderedmultiset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9 + 7;
const ll Max = 5e5 + 5;
const ll inf = 1e18+5;
ll fact[Max];
ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a, ll b){ return (a/gcd(a, b)*b);}
ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};
void dfs(ll node, ll parent, vector<ll> &vis, vector<vector<ll>> &adj, ll tin[], ll low[], vector<vector<ll>> &bridges, ll sz[], ll timer )
{
    //cout <<node << nl;
    vis[node] = 1;
    tin[node] = low[node] = timer;
    timer++;
    sz[node] = 1;
    for(auto it : adj[node]){
        if(it == parent) continue;
        if(vis[it] == 0){
            dfs(it, node, vis, adj, tin, low, bridges, sz, timer);
            low[node] = min(low[node], low[it]);
            if(low[it] > tin[node]){
                bridges.push_back({it, node});
            }
            sz[node] += sz[it];
        }
        else{
            low[node] = min(low[node], low[it]);
        }
    }
}
int main()
{
    urmi();
    //fac();
    ll test=1;
    cin >> test;
    for(ll i1 = 1; i1 <= test; i1++){
        ll n, m;
        cin >> n >> m;
        vector<vector<ll>>adj(n + 1);
        while(m--){
            ll a, b;
            cin >> a >> b;
            adj[a].pb(b);
            adj[b].pb(a);
        }
        vector<ll>vis(n + 1, 0);
        ll tin[n + 1], low[n + 1], sz[n + 1] = {0};
        vector<vector<ll>>bridges;
        ll timer = 0;
        ll ans = (n * (n - 1)) / 2;
        dfs(1, -1, vis, adj, tin, low, bridges, sz, timer);
        //for(ll i = 0; i < bridges.size(); i++) cout << bridges[i][0] << " abc " << bridges[i][1] << nl;
        for(ll i = 0; i < bridges.size(); i++){
            ll l = bridges[i][0], r = bridges[i][1];
            ll c = sz[l], d = sz[r];
            c = min(c, d);
            d = n - c;
            ll e = (c * (c - 1)) / 2;
            ll f = (d * (d - 1)) / 2;
            //cout << l << " " << r << " " << c << " " << d << " " << e << " " << f << nl;
            ans = min(ans, e + f);
        }
        cout << ans << nl;
    }
}
