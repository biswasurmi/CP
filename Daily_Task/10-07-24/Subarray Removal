///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*b)/gcd(a,b)
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9 + 7;
const ll Max = 200005;
const ll inf = 1e18+5;
ll fact[Max];

ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};

int main()
{
    urmi();
    //fac();
    ll test=1;
    cin >> test;
    for(ll i1 = 1; i1 <= test; i1++){
        ll n, c = 0;
        cin >> n;
        ll a[n], b[n + 1];
        for(int i = 0; i < n; i++){
            cin >> a[i];
            b[a[i]] = i+ 1;
        }
        set<pair<ll, ll>>s;
        if(b[1] == 1 || b[1] == n){
            cout << n - 1 << endl;
            continue;
        }
        s.insert({1, b[1] - 1});
        s.insert({b[1] + 1, n});
        ll fa = 1;
        for(int i = 2; i <= n ;i++){
//            cout << "i " << i  << endl;
//            for(auto it : s){
//                cout << it.fi << " " << it.se << endl;
//            }
            auto it = s.lower_bound({b[i], b[i]});
            if(it == s.end()) it--;
            auto it1 = it;
            bool ok = false;
//            cout << it -> fi << " cc " << it -> se <<endl;
            for(int j = 0; j < 2 && it1 != s.end(); j++){
                if(it1 -> fi <= b[i] && it1 ->se >= b[i]){
                    ok = true;
                    break;
                }
                else it1++;
            }
            if(!ok){
                it1 = it;
                for(int j = 0; j < 2; j++){
                    if(it1 -> fi <= b[i] && it1 ->se >= b[i]){
                        ok = true;
                        break;
                    }
                    if(it1 == s.begin()) break;
                    it1--;
                }
            }
            ll c = it1 -> fi, d = it1 -> se;
//            cout << i << " " << c << " " << d << endl;
            s.erase(it1);
            if(c == d){

            }
            else if(c == b[i]){
                s.insert({c + 1, d});
            }
            else if(d == b[i]){
                s.insert({c, d - 1});
            }
            else{
                s.insert({c, b[i] - 1});
                s.insert({b[i] + 1, d});
            }
            if(s.size() == 1){
                fa = n - i;
                break;
            }
//            cout << "abc" << endl;
//            for(auto it : s){
//                cout << it.fi << " " << it.se << endl;
//            }
        }
        cout << fa << endl;
    }
}
