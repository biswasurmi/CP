///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll          long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*b)/gcd(a,b)
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9 + 7;
const ll Max = 2e5 + 5;
const ll inf = 9223372036854775807;
ll fact[Max];

ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};

int main()
{
    //urmi();
    //fac();
    ll test=1;
    cin >> test;
    for(ll i1 = 1; i1 <= test; i1++){
        ll n;
        cin >> n;
        string s;
        cin >> s;
        ll f = 0, fr = 0, fro = 0, fron = 0, front1 = 0;
        for(ll i = 0; i < n ;i++){
            if(s[i] == 'f'){
                f++;
            }
            else if(s[i] == 'r'){
                if(f){
                    fr++;
                    f--;
                }
            }
            else if(s[i] == 'o'){
                if(fr){
                    fro++;
                    fr--;
                }
            }
            else if(s[i] == 'n'){
                if(fro){
                    fron++;
                    fro--;
                }
            }
            else if(s[i] == 't'){
                if(fron){
                    front1++;
                    fron--;
                }
            }
        }
        //cout << front1 << " " << fron << " " << fro << " " << fr << " " << f << nl;
        n -= 5LL * front1;
        ll cnt = front1;
        if(cnt){
            n -= 4LL * fron;
        }
        while(cnt >= 2LL && fro){
            n -= 3LL;
            cnt --;
            fro--;
        }
        while(cnt >= 3LL && fr){
            n -= 2LL;
            cnt -= 2LL;
            fr--;
        }
        while(cnt >= 4LL && f){
            n --;
            cnt -= 3LL;
            f--;
        }
        while(cnt >= 5LL){
            cnt -= 5LL;
            cnt++;
        }
        //cout << cnt << " " << n << nl;
        reverse(s.begin(), s.end());
        ll k = 0, ck = 0, ack = 0, back1 = 0;
        for(ll i = 0; i < s.size();i++){
            if(s[i] == 'k') k++;
            else if(s[i] == 'c'){
                if(k){
                    k--;
                    ck++;
                }
            }
            else if(s[i] == 'a'){
                if(ck){
                    ack++;
                    ck--;
                }
            }
            else if(s[i] == 'b'){
                if(ack){
                    back1++;
                    ack--;
                }
            }
        }
        //cout << back1 << " " << ack << " " << ck << " " << k << nl;
        n -= 4LL * back1;
        ll cnt1 = back1;
        if(cnt1){
            n -= 3LL * ack;
        }
        while(cnt1 >= 2LL && ck){
            n -= 2LL;
            cnt1--;ck--;
        }
        while(cnt1 >= 3LL && k){
            n--;
            k--;
            cnt1 -= 2LL;
        }
        while(cnt1 >= 4LL){
            cnt1 -= 4LL;
            cnt1++;
        }
        //cout << cnt1 << " " << n << nl;
        cout << cnt + cnt1 + n << nl;
    }
}
