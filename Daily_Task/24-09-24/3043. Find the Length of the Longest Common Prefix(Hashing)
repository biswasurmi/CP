https://leetcode.com/problems/find-the-length-of-the-longest-common-prefix/description/?envType=daily-question&envId=2024-09-24
class Solution {
public:
    const int p1 = 137, mod1 = 127657753, p2 = 277, mod2 = 987654319;
    const int n = 5e4 + 5;
    int power(long long n, long long k, int mod) /// bigmod
    {
        int ans = 1 % mod; n %= mod; if(n < 0) n += mod;
        while(k){
            if(k & 1) ans = (long long) ans * n % mod;
            n = (long long) n * n % mod;
            k >>= 1;
        }
        return ans;
    }

    int ip1, ip2;
    pair<int, int> pw[50005], ipw[50005];
    void prec() /// power + inverse power calculation
    {
        pw[0] = {1,1};
        for(int i = 1; i < n ; i++){
            pw[i].first = 1LL * pw[i - 1].first * p1 % mod1;
            pw[i].second = 1LL * pw[i - 1].second * p2 % mod2;
        }
        ip1 = power(p1, mod1 - 2, mod1);
        ip2 = power(p2, mod2 - 2, mod2);
        ipw[0] = {1,1};
        for(int i = 1; i < n; i++){
            ipw[i].first = 1LL * ipw[i - 1].first * ip1 % mod1;
            ipw[i].second = 1LL * ipw[i - 1].second * ip2 % mod2;
        }
    }

    pair<int, int> pref[50005];
    void build(string s) ///build the prefix array to find substring hash
    {
        int n = s.size();
        for(int i = 0; i < n; i++){
            pref[i].first = 1LL * s[i] * pw[i].first % mod1;
            if(i) pref[i].first = (pref[i].first + pref[i-1].first) % mod1;
            pref[i].second = 1LL * s[i] * pw[i].second % mod2;
            if(i) pref[i].second = (pref[i].second + pref[i - 1].second) % mod2;
        }
    }
    pair<int, int> get_hash(int i, int j) /// find the hash of a substring
    {
        pair<int, int> hs({0,0});
        hs.first = pref[j].first;
        if(i) hs.first = (hs.first - pref[i-1].first + mod1)% mod1;
        hs.first = 1LL * hs.first * ipw[i].first % mod1;
        hs.second = pref[j].second;
        if(i) hs.second = (hs.second - pref[i - 1].second + mod2) % mod2;
        hs.second = 1LL * hs.second * ipw[i].second % mod2;
        return hs;
    }
    int longestCommonPrefix(vector<int>& arr1, vector<int>& arr2) {
        prec();
        map<pair<pair<int, int>, int>, int>m;
        for(auto i : arr1){
            string s = to_string(i);
            build(s);
            for(int j = 0; j < s.size(); j++){
                auto it = get_hash(0, j);
                //cout << 0 << " " << j << " " << s << " " << it.first << " " << it.second<< endl;
                m[{it, j + 1}] = 1;
            }
        }
        int ans = 0;
        for(auto i : arr2){
            string s = to_string(i);
            build(s);
            for(int j = 0; j < s.size(); j++){
                auto it = get_hash(0, j);
                //cout << 0 << " " << j << " " << s << " " << it.first << " " << it.second<< endl;
                if(m[{it, j + 1}]){
                    ans = max(ans, j + 1);
                }
            }
        }
        return ans;
    }
};
