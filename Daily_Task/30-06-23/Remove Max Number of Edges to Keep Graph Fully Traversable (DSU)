class Solution {
public:
    class DisjointSet {
    vector<int> rank, parent, size; 
    public: 
        DisjointSet(int n) {
            rank.resize(n+1, 0); 
            parent.resize(n+1);
            size.resize(n+1); 
            for(int i = 0;i<=n;i++) {
                parent[i] = i; 
                size[i] = 1; 
            }
        }

        int findUPar(int node) {
            if(node == parent[node])
                return node; 
            return parent[node] = findUPar(parent[node]); 
        }

        void unionByRank(int u, int v) {
            int ulp_u = findUPar(u); 
            int ulp_v = findUPar(v); 
            if(ulp_u == ulp_v) return; 
            if(rank[ulp_u] < rank[ulp_v]) {
                parent[ulp_u] = ulp_v; 
            }
            else if(rank[ulp_v] < rank[ulp_u]) {
                parent[ulp_v] = ulp_u; 
            }
            else {
                parent[ulp_v] = ulp_u; 
                rank[ulp_u]++; 
            }
        }

        void unionBySize(int u, int v) {
            int ulp_u = findUPar(u); 
            int ulp_v = findUPar(v); 
            if(ulp_u == ulp_v) return; 
            if(size[ulp_u] < size[ulp_v]) {
                parent[ulp_u] = ulp_v; 
                size[ulp_v] += size[ulp_u]; 
            }
            else {
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v]; 
            }
        }
    }; 
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        DisjointSet ds(n + 1), ds1(n + 1);
        int ans = 0;
        for(int i = 0; i < edges.size(); i++){
            int type = edges[i][0], a = edges[i][1], b = edges[i][2];
            if(type == 3){
                //cout << a << " "<< b << " " << ds.findUPar(a) << " " << ds.findUPar(b) << endl;
                if(ds.findUPar(a) != ds.findUPar(b)){
                    ds.unionBySize(a, b);
                    ds1.unionBySize(a, b);
                }
                else ans++;
            }
        }
        for(int i = 0; i < edges.size(); i++){
            int type = edges[i][0], a = edges[i][1], b = edges[i][2];
            if(type == 1){
                //cout << a << " "<< b << " " << ds.findUPar(a) << " " << ds.findUPar(b) << endl;
                if(ds.findUPar(a) != ds.findUPar(b)){
                    ds.unionBySize(a, b);
                }
                else ans++;
            }
            else if(type == 2){
                //cout << a << " "<< b << " " << ds1.findUPar(a) << " " << ds1.findUPar(b) << endl;
                if(ds1.findUPar(a) != ds1.findUPar(b)){
                    ds1.unionBySize(a, b);
                }
                else ans++;
            }
        }
        for(int i = 1; i <= n;i++){
            if(ds.findUPar(1) != ds.findUPar(i)) return -1;
            if(ds1.findUPar(1) != ds1.findUPar(i)) return -1;
        }
        return ans;
    }
};
