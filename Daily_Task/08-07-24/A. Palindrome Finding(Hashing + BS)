#include<bits/stdc++.h>
using namespace std;
const int p1 = 137, mod1 = 127657753, p2 = 277, mod2 = 987654319;

const int n = 1e6 + 5;

int power(long long n, long long k, int mod) /// bigmod
{
    int ans = 1 % mod; n %= mod; if(n < 0) n += mod;
    while(k){
        if(k & 1) ans = (long long) ans * n % mod;
        n = (long long) n * n % mod;
        k >>= 1;
    }
    return ans;
}

int ip1, ip2;
pair<int, int> pw[n], ipw[n];
void prec() /// power + inverse power calculation
{
    pw[0] = {1,1};
    for(int i = 1; i < n ; i++){
        pw[i].first = 1LL * pw[i - 1].first * p1 % mod1;
        pw[i].second = 1LL * pw[i - 1].second * p2 % mod2;
    }
    ip1 = power(p1, mod1 - 2, mod1);
    ip2 = power(p2, mod2 - 2, mod2);
    ipw[0] = {1,1};
    for(int i = 1; i < n; i++){
        ipw[i].first = 1LL * ipw[i - 1].first * ip1 % mod1;
        ipw[i].second = 1LL * ipw[i - 1].second * ip2 % mod2;
    }
}

pair<int, int> pref[n];
void build(string s) ///build the prefix array to find substring hash
{
    int n = s.size();
    for(int i = 0; i < n; i++){
        pref[i].first = 1LL * s[i] * pw[i].first % mod1;
        if(i) pref[i].first = (pref[i].first + pref[i-1].first) % mod1;
        pref[i].second = 1LL * s[i] * pw[i].second % mod2;
        if(i) pref[i].second = (pref[i].second + pref[i - 1].second) % mod2;
    }
}
pair<int, int> get_hash(int i, int j) /// find the hash of a substring
{
    pair<int, int> hs({0,0});
    hs.first = pref[j].first;
    if(i) hs.first = (hs.first - pref[i-1].first + mod1)% mod1;
    hs.first = 1LL * hs.first * ipw[i].first % mod1;
    hs.second = pref[j].second;
    if(i) hs.second = (hs.second - pref[i - 1].second + mod2) % mod2;
    hs.second = 1LL * hs.second * ipw[i].second % mod2;
    return hs;
}
pair<int, int> pref1[n];
void build1(string s) ///build the prefix array to find substring hash
{
    int n = s.size();
    for(int i = 0; i < n; i++){
        pref1[i].first = 1LL * s[i] * pw[i].first % mod1;
        if(i) pref1[i].first = (pref1[i].first + pref1[i-1].first) % mod1;
        pref1[i].second = 1LL * s[i] * pw[i].second % mod2;
        if(i) pref1[i].second = (pref1[i].second + pref1[i - 1].second) % mod2;
    }
}
pair<int, int> get_hash1(int i, int j) /// find the hash of a substring
{

    pair<int, int> hs({0,0});
    hs.first = pref1[j].first;
    if(i) hs.first = (hs.first - pref1[i-1].first + mod1)% mod1;
    hs.first = 1LL * hs.first * ipw[i].first % mod1;
    hs.second = pref1[j].second;
    if(i) hs.second = (hs.second - pref1[i - 1].second + mod2) % mod2;
    hs.second = 1LL * hs.second * ipw[i].second % mod2;
    return hs;
}

int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n1, q;
    string s;
    cin >> n1 >> q;
    cin >> s;
    string s1 = s;
    reverse(s1.begin(), s1.end());
    prec();
    build(s);
    build1(s1);
    int pp[n1 + 4] = {0};
    for(int i = 0, j = n1 - 1; i < n1; i++, j--){
        pp[j] = i;
    }
    while(q--){
        int a, b, k, dif = 0, sam = 0;
        cin >> a >> b >> k;
        a--;
        b--;
        int mid = (b + a) / 2;
        if((b + a) % 2 == 0){
            mid--;
        }
        for(int i = a, j = b; i <= mid;){
            int l = i, r = j, ans = -1;
            //cout << "start " << i << " " << j << endl;
            if(dif > k) break;
            while(l <= r){

                int mi = (l + r) / 2;
                int p = (mi - i + 1);
                int q = (j - p + 1);
                //cout << "mi " <<  i << " " << mi << " " << q << " " << j << " " << pp[j] << " " << pp[q] << endl;
                auto it = get_hash(i, mi);
                auto it1 = get_hash1(pp[j], pp[q]);
                if(it == it1){
                    //cout << "ok " << endl;
                    ans = max(ans, mi);
                    l = mi + 1;
                }
                else r = mi - 1;
            }
            //cout <<" i " << i << " " << ans << " " ;
            if(ans == -1){
                j--;
                dif++;
                i++;
            }
            else{
                j -= (ans - i + 1);
                i = ans + 1;
                if(i <= mid){
                    dif++;
                    i++;
                    j--;
                }

            }
            //cout << dif << " " << sam << endl;
        }
        if(k < dif) cout << "No" << endl;
        else if(k == dif) cout << "Yes" << endl;
        else if(dif == 0){
            if(k == 1 && (b - a + 1) % 2 == 0){
                cout << "No" << endl;
            }
            else{
                cout << "Yes" << endl;
            }
        }
        else{
            cout << "Yes" << endl;
        }
    }
    return 0;
}
