#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#define gcd(a,b)    __gcd(a,b)
#define lcm(a,b)    (a*b)/gcd(a,b)
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define orderedmultiset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9 + 7;
const ll Max = 150005;
const ll inf = 1e18+5;
ll fact[Max];

ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};
ll n, k, ok, len1,len2;
ll a[Max];
ll dp[Max][355];
ll solve(ll i,ll x,ll y){
    if(x==0&&y==0)return 0;
    if(i>n) return 1e17;

    if(dp[i][x]!=-1)return dp[i][x];


    ll ans=1e17;
    if(x){
        ans=(a[i+len1-1]-a[i])+solve(i+len1,x-1,y);
        //cout<<i<<" "<<ans<<" "<<1<<endl;

    }
    if(y){
            //cout<<ans<<endl;
        ans=min(ans,(a[i+len2-1]-a[i])+solve(i+len2,x,y-1));
        //cout<<i<<" "<<ans<<" "<<2<<endl;
    }

    return dp[i][x]=ans;
}
int main()
{
    //urmi();
    //fac();
    ll test=1;
    //cin >> test;
    for(ll i1 = 1; i1 <= test; i1++){
        cin >> n >> k;
        for(int i = 1; i <=n; i++) cin >> a[i];
        sort(a+1, a+ n+1);
        set<int>s;
        int b[n + 5] = {0};
        memset(dp,-1,sizeof(dp));

        for(int i = 1; i <= k; i++){
            int p = 0;
            for(int j = i; j <= n; j += k){
                p++;
            }
            s.insert(p);
            b[p]++;
        }
        //for(auto it : s) cout << it << " " ;cout << nl;
        int x,y;
        if(s.size() == 1){
            len1 = *(s.begin());
            x=k;
            len2=0,y=0;
        }
        else{
            auto it = s.begin();
            len2=*it;
            y=b[*it];

            it++;
            len1=*it;
            x=b[*it];
        }

        //cout<<len1<<" "<<x<<" "<<len2<<" "<<y<<endl;

        if(x>y){
            swap(x,y);
            swap(len1,len2);
        }

        cout<<solve(1,x,y)<<endl;
    }
}
