class DisjointSet {
    vector<int> rank, parent, size; 
public: 
    DisjointSet(int n) {
        rank.resize(n, 0); 
        parent.resize(n);
        size.resize(n); 
        for(int i = 0; i < n; i++) {
            parent[i] = i; 
            size[i] = 1; 
        }
    }

    int findUPar(int node) {
        if(node == parent[node])
            return node; 
        return parent[node] = findUPar(parent[node]); 
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) return; 
        if(rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v; 
        }
        else if(rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u; 
        }
        else {
            parent[ulp_v] = ulp_u; 
            rank[ulp_u]++; 
        }
    }

    void unionBySize(int u, int v, int &cnt) {
        int ulp_u = findUPar(u); 
        int ulp_v = findUPar(v); 
        if(ulp_u == ulp_v) {
            cnt++; 
            return;
        }
        if(size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v; 
            size[ulp_v] += size[ulp_u]; 
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v]; 
        }
    }
}; 

class Solution {
public:
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        int dots = n + 1;
        DisjointSet ds(dots * dots);
        int cnt = 0;
        
        // Connect all boundary dots to a dummy node (0)
        for(int i = 0; i < dots; i++) {
            for(int j = 0; j < dots; j++) {
                if(i == 0 || j == 0 || i == dots-1 || j == dots - 1) {
                    int cell = dots * i + j;
                    ds.unionBySize(0, cell, cnt);
                }
            }
        }

        // Connect cells based on the slashes
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '\\') {
                    int cell1 = i * dots + j;
                    int cell2 = (i + 1) * dots + (j + 1);
                    ds.unionBySize(cell1, cell2, cnt);
                }
                else if(grid[i][j] == '/') {
                    int cell1 = i * dots + (j + 1);
                    int cell2 = (i + 1) * dots + j;
                    ds.unionBySize(cell1, cell2, cnt);
                }
            }
        }
        return cnt;
    }
};
