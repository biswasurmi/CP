class Solution {
public:
    int time = 0;
    vector<vector<int>> disc, low;
    vector<vector<bool>> vis;
    int dx[4] = {0, 0, -1, 1};
    int dy[4] = {1, -1, 0, 0};
    
    void dfs(int i, int j, int parent_i, int parent_j, vector<vector<int>>& grid, vector<pair<int, int>>& articulationPoints) {
        vis[i][j] = true;
        disc[i][j] = low[i][j] = ++time;
        int children = 0;
        
        int n = grid.size();
        int m = grid[0].size();
        
        for (int d = 0; d < 4; ++d) {
            int ni = i + dx[d];
            int nj = j + dy[d];
            
            if (ni >= 0 && ni < n && nj >= 0 && nj < m && grid[ni][nj] == 1) {
                if (!vis[ni][nj]) {
                    children++;
                    dfs(ni, nj, i, j, grid, articulationPoints);
                    
                    // Check if the subtree rooted at (ni, nj) has a connection back to one of the ancestors of (i, j)
                    low[i][j] = min(low[i][j], low[ni][nj]);
                    
                    // If (i, j) is the root of DFS tree and has more than one child, it's an articulation point
                    if ((parent_i == -1 && children > 1) || (parent_i != -1 && low[ni][nj] >= disc[i][j])) {
                        articulationPoints.push_back({i, j});
                    }
                }
                else if (!(ni == parent_i && nj == parent_j)) {
                    low[i][j] = min(low[i][j], disc[ni][nj]);
                }
            }
        }
    }
    
    void dfsConnectivity(int i, int j, vector<vector<int>>& grid) {
        vis[i][j] = true;
        int n = grid.size();
        int m = grid[0].size();
        
        for (int d = 0; d < 4; ++d) {
            int ni = i + dx[d];
            int nj = j + dy[d];
            
            if (ni >= 0 && ni < n && nj >= 0 && nj < m && grid[ni][nj] == 1 && !vis[ni][nj]) {
                dfsConnectivity(ni, nj, grid);
            }
        }
    }
    
    bool isConnected(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vis.assign(n, vector<bool>(m, false));
        int components = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    if (components > 0) return false; // More than one component
                    dfsConnectivity(i, j, grid);
                    components++;
                }
            }
        }
        return true;
    }
    
    int minDays(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        // Check if the grid is already disconnected
        if (!isConnected(grid)) return 0;
        
        // Initialize discovery and low arrays
        disc.assign(n, vector<int>(m, -1));
        low.assign(n, vector<int>(m, -1));
        vis.assign(n, vector<bool>(m, false));
        
        vector<pair<int, int>> articulationPoints;
        int cnt = 0;
        // Run Tarjan's algorithm to find articulation points
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if(grid[i][j] == 1) cnt++;
                if (grid[i][j] == 1 && !vis[i][j]) {
                    dfs(i, j, -1, -1, grid, articulationPoints);
                }
            }
        }
        if(cnt == 0) return 0;
        // If there is an articulation point, we can disconnect the grid by removing it
        if (!articulationPoints.empty() || cnt == 1) return 1;
        
        // Otherwise, we need at least two days to disconnect the grid
        return 2;
    }
}; // Ensure this closing brace is here for the class
