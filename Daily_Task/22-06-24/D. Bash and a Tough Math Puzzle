///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define orderedmultiset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9 + 7;
const ll Max = 5e5 + 5;
const ll inf = 1e18+5;
ll fact[Max];
ll gcd(ll x,ll y){if(y==0)return x;gcd(y,x%y);}
ll lcm(ll a, ll b){ return (a/gcd(a, b)*b);}
ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};
ll n, m, p;
ll a[Max];
ll st[4 * Max];
void build(ll si, ll ss, ll se)
{
    if(ss == se){

        st[si] = a[ss];
        return;
    }
    ll mid = (ss + se) >> 1LL;
    build(2 * si, ss, mid);
    build(2 * si + 1, mid + 1, se);
    st[si] = gcd(st[2 * si], st[2 * si + 1]);
}
void update(ll si, ll ss, ll se, ll pos, ll value)
{
    if(pos > se || pos < ss) return;
    if(ss == se){
        st[si] = value;
        return;
    }
    ll mid = (ss + se) >> 1LL;
    update(2 * si, ss, mid, pos, value);
    update(2 * si + 1, mid + 1, se, pos, value);
    st[si] = gcd(st[2 * si], st[2 * si + 1]);
}
void query(ll si,ll ss,ll se,ll qs,ll qe, ll x)
{
    if(p > 1) return;
    if(qs>se||qe<ss) return;
    if(qs <= ss && se<=qe){
        if(st[si] % x == 0) return;
        if(ss == se){
            p++;
            return;

        }
    }
    ll mid=(ss+se)/2;
    query(2 * si, ss, mid, qs , qe, x);
    query(2 * si + 1, mid + 1, se, qs, qe, x);
}
int main()
{
    urmi();
    //fac();
    ll test=1;
    //cin>>test;
    for(ll i1=1;i1<=test;i1++){
        cin >> n;
        for(int i = 1; i <= n; i++) cin >> a[i];
        build(1, 1, n);
        cin >> m;
        while(m--){
            ll p1, q, r, x;
            cin >> p1 >> q >> r;
            if(p1 == 1){
                p = 0;
                cin >> x;
                query(1, 1, n, q, r, x);
                if(p <= 1) cout << "YES" << nl;
                else cout << "NO" << nl;
            }
            else{
                update(1, 1, n, q, r);
            }
        }
    }
}
