///131111129..........
#include<bits/stdc++.h>
#include<sstream>
using namespace std;
#define ll         long long int
#define pi          acos(-1)
#define pb          push_back
#define mp          make_pair
#define fi          first
#define se          second
#define nl          '\n'
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define orderedmultiset tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<ll, null_type,less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update>
//Chess moves.........
 int dx[] = {+0, +0, -1, +1}; ///Up-down, Left-Right//
int dy[] = {+1, -1, +0, +0};
///int dx[] = {+0,+0,+1,-1,-1,+1,-1,+1}; ///King's Move// int dy[] = {-1,+1,+0,+0,+1,+1,-1,-1}; int dx[] = {-2, -2, -1, -1,  1,  1,  2,  2}; ///Knight's Move// int dy[] = {-1,  1, -2,  2, -2,  2, -1,  1};
//Constants........
const ll mod = 1e9+7;
const ll Max = 5e5+5;
const ll inf = 1e18+5;
ll fact[Max];
ll gcd(ll a, ll b){ while (b){ a %= b; swap(a, b);} return a;}
ll lcm(ll a, ll b){ return (a/gcd(a, b)*b);}
ll bigmod(ll a,ll b, ll mod){b%=(mod-1);ll result=1ll;while(b>0ll){if(b&1ll) result=result*a%mod;a=a*a%mod;b>>=1ll;}return result;}
int mul(int x, int y){return (x  * y) % mod;}
int binpow(int x, int y){int z = 1;while(y){if(y & 1) z = mul(z, x);x = mul(x, x);y >>= 1;}return z;}
int inv(int x){return binpow(x, mod - 2);}
int ncr(int a,int b){if(a<0 || b<0)return 0;if(a<b)return 0;int ans=fact[a];ans=(ans*inv(fact[b]))%mod;ans=(ans*inv(fact[a-b]))%mod;return ans;}
void fac(){fact[0]=fact[1]=1;for(ll i=2;i<Max;i++){fact[i]=(fact[i-1]*i)%mod;}}
void urmi()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
struct less_then_greater {
    template<typename T, typename U>
    bool operator()(T const& lhs, U const& rhs) const {
        if (lhs.first < rhs.first) return true;
        if (rhs.first < lhs.first) return false;
        return lhs.second>rhs.second;
    }
};
ll val[Max];
ll n, m;
int main()
{
    urmi();
    //fac();
    ll test=1;
    //solve();
    cin>>test;
    for(ll i1=1;i1<=test;i1++){
        cin >> n >> m;
        char a[n][m];
        ll pre[n][m], vis[n][m];
        for(int i = 0; i <= max(n, m); i++) val[i] = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                cin >> a[i][j];
                pre[i][j] = vis[i][j] = 0;
            }
        }
        ll row[n], col[m];
        for(int i = 0; i < n; i++){
            ll cnt = 0;
            for(int j = 0; j < m ;j++){
                if(a[i][j] == '.') cnt++;
            }
            row[i] = cnt;
        }
        for(int j = 0; j < m; j++){
            ll cnt = 0;
            for(int i = 0; i < n; i++){
                if(a[i][j] == '.') cnt++;
            }
            col[j] = cnt;
        }
        ll con = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(a[i][j] == '#' && (!vis[i][j])){
                    con++;
                    queue<pair<int, int>>q;
                    q.push({i, j});
                    pre[i][j] = con;
                    vis[i][j] = 1;
                    val[con] = 1;
                    while(!q.empty()){
                        auto u = q.front();
                        ll c = u.fi, d = u.se;
                        q.pop();
                        for(ll i = 0; i < 4; i++){
                            ll x = c + dx[i];
                            ll y = d + dy[i];
                            if((x >= 0 && x < n) && (y >= 0 && y < m) && (a[x][y] == '#') && !vis[x][y]){
                                q.push({x, y});
                                vis[x][y] = 1;
                                pre[x][y] = con;
                                val[con]++;
                            }
                        }
                    }
                }
            }
        }
        //cout << con << nl;
        //for(int i = 1; i <= con; i++) cout << val[i] << " " ;cout << nl;
        //cout << "abc" << nl;
        ll fa = 0;
        for(int i = 0; i < n; i++){
            set<ll>v;
            ll ans = 0;
            for(int j = 0; j < m; j++){
                if(i - 1 >= 0){
                    if(pre[i - 1][j]){
                        v.insert(pre[i - 1][j]);
                    }
                }
                if((i + 1 < n) && pre[i + 1][j]){
                    v.insert(pre[i + 1][j]);
                }
                if(pre[i][j]){
                    v.insert(pre[i][j]);
                }
            }
            //cout << "ROW " << i << nl;
            if(v.size()){
                for(auto it : v){
                    ans += val[it];
                    //cout << it << " " << val[it] << nl;
                }
            }
            ans += row[i];
            //cout << row[i] << " " << ans << nl << nl;
            fa = max(fa, ans);
        }

        for(int j = 0; j < m; j++){
            set<ll>v;
            ll ans = 0;
            for(int i = 0; i < n; i++){
                if(j - 1 >= 0){
                    if(pre[i ][j- 1]){
                        v.insert(pre[i][j - 1]);
                    }
                }
                if((j + 1 < m) && pre[i][j + 1]){
                    v.insert(pre[i][j + 1]);
                }
                if(pre[i][j]){
                    v.insert(pre[i][j]);
                }
            }
            if(v.size()){
                for(auto it : v){
                    ans += val[it];
                }
            }
            ans += col[j];
            fa = max(fa, ans);
        }
        cout << fa << nl;
    }
}
