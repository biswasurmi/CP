/// https://leetcode.com/contest/biweekly-contest-134/problems/number-of-subarrays-with-and-value-of-k/description/


#define ll long long
#define Max 100005
class Solution {
public:
    ll n, m = 0;
    ll a[Max];
    ll st[4 * Max];
    void build(ll si, ll ss, ll se)
    {
        if(ss == se){

            st[si] = a[ss];
            return;
        }
        ll mid = (ss + se) >> 1LL;
        build(2 * si, ss, mid);
        build(2 * si + 1, mid + 1, se);
        st[si] = st[2 * si] & st[2 * si + 1];
    }

    ll query(ll si,ll ss,ll se,ll qs,ll qe)
    {
        if(qs>se||qe<ss) return m;
        if(ss>=qs && se<=qe) return st[si];
        ll mid=(ss+se)/2;
        return query(2 * si, ss, mid, qs, qe) & query(2 * si + 1, mid + 1, se, qs, qe);
    }
    long long countSubarrays(vector<int>& nums, int k) {
        for(ll i = 0, an = 1;i <= 30; i++){
            if(m >= 10000000000) break;
            m += an;
            an *= 2ll;
        }
        for(int i = 1; i <= nums.size(); i++) a[i] = nums[i - 1];
        ll n = nums.size(), fa = 0;
        build(1, 1, n);
        //cout << query(1, 1, n , 1, n) << endl;
        for(ll i = 1; i <= n;i ++){
            //cout <<"i " << i << endl;
            ll l = i, r = n, ans = n + 1;
            while(l <= r){
                ll mid = (l + r) / 2;
                ll c = query(1, 1, n, i, mid);
                //cout << l << " " << r << " "  << mid << " " << c << endl;
                if(c == k){
                    ans = min(ans, mid);
                    r = mid - 1;
                }
                else if(c < k) r = mid - 1;
                else l = mid + 1;
            }
            //cout << "ans " << ans << " " << n - ans + 1 << endl;
            if(ans >= i && ans <= n){
                l = i; r = n; ll ans1 = 0;
                while(l <= r){
                    ll mid = (l + r) / 2;
                    ll c = query(1, 1, n, i, mid);
                    //cout << l << " " << r << " "  << mid << " " << c << endl;
                    if(c == k){
                        ans1 = max(ans1, mid);
                        l = mid + 1;
                    }
                    else if(c < k) r = mid - 1;
                    else l = mid + 1;
                }
               // cout << i << " " << ans1 << endl;
                if(ans1 >= ans){
                    fa += ans1 - ans + 1;
                }
                
            }
            
        }
        return fa;
    }
};
